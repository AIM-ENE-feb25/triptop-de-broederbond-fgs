@startuml

class PaymentController{
    -paymentService : PaymentService

    +handlePayment(PaymentRequest paymentRequest) : ResponseEntity<String>
}
PaymentController --> PaymentService : calls

class PaymentService{
    +handlePayment(PaymentRequest paymentRequest) : String
}
PaymentService --> PaymentMethodStrategy : uses
PaymentService --> PaymentMethodHandler : uses

interface PaymentMethodHandler{
    +handlePayment(PaymentRequest request): String
}

class PaypalHandler{
    -CLIENT_ID : String
    -CLIENT_SECRET : String
    -MAX_TRIES : int

    +handlePayment(PaymentRequest request): String
    -checkStatus(String token, String paymentId): void
    -getToken() : String
    -createPayment(String token, BigDecimal amount) : String
    -getUserPaymentLink(JSONObject json) : String
    -capturePayment(String token, String paymentId) : String
}
PaypalHandler ..|> PaymentMethodHandler : implements

class StripeHandler{
    -API_KEY : String

    +handlePayment(PaymentRequest paymentRequest) : String
    -createProduct(BigDecimal amount) : Product
    -createPaymentLink(String amount) : PaymentLink
}
StripeHandler ..|> PaymentMethodHandler : implements

class PaymentMethodStrategy{
    -{static}handlers : Map<PaymentMethod, PaymentMethodHandler>
    +{static}getHandler(PaymentMethod method) : PaymentMethodHandler
}
PaymentMethodStrategy --> PaymentMethod : uses
PaymentMethodStrategy --> PaymentMethodHandler : uses

class PaymentRequest{
    -buildingBlocks : List<Object>
    -paymentMethod : PaymentMethod
    -amount : BigDecimal
}
PaymentRequest --> PaymentMethod : uses

enum PaymentMethod{
    PAYPAL
    STRIPE
}

@enduml